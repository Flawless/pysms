#!/usr/bin/env python
import serial
import time
import mailbox
import email
# SETTINGS
PORT='/dev/ttyACM0'
BAUDRATE='19200'
msg_ok='OK\r\n'
mbox=mailbox.Maildir('/var/mail/smssrv')
period=60
timeout=30
# INIT
state='idle'
ser=serial.Serial(PORT, BAUDRATE, timeout=5)
timestamp=time.time()
def send_command(command_str, answer=msg_ok, timeout=timeout):
    global ser
    ser.flushInput() # очистим буфер
    ser.write(command_str.encode())
    return wait_for(answer, timeout)
def wait_for(template, timeout=timeout):
    global ser
    template=template.encode()
    answer = (b'')
    timestamp=time.time()
    while time.time()-timestamp<timeout and not template in answer:
        answer+=ser.read(ser.inWaiting())
        time.sleep(0.1)
    print(answer)
    return template in answer
def check_power_on():
    return send_command('AT\r')
def power_on():
    ser.write(b'+++')
def load_initial_settings():
    if not send_command('ATZ\r'): # Сбросим настройки
        return False 
    if not send_command('AT+CSMP=17,167,0,0\r'): # Включим режим отправки обычных сообщений (17,167,0,16 для flash message)
        return False
    return send_command('AT+CMGF=1\r') # Включим текстовый режим
def send_sms(recipient, content):
    if not send_command('AT+CMGS="' + recipient + '"\r', '>'):
        return False
    if not send_command(content.encode() + b'\r', '>'):
        return False
    return send_command(bytes([26]))
# STATE MACHINE
# +STATES
def idle():
    print('initialization..')
    global ser
    global state
    print('serial..')
    if not ser.isOpen():
        ser=ser.open()
        if ser.isOpen(): 
            print('OK')
        else:
            print('FAIL')
            return
    else:
        print('OK')
    print('power..')
    if not check_power_on():
        power_on()
        if check_power_on():
            print('OK')
        else:
            print('FAIL')
            return
    else:
        print('OK')
    print('initial setiings..')
    if load_initial_settings():
        print('OK')
    else:
        print('FAIL')
        return
    state='wait'
def wait():
    print('Ready to serve!')
    print('checking email..')
    if mbox.__len__()==0:
        print('Maildir empty')
    else:
        for key in mbox.keys():
            message = email.message_from_string(mbox.get_string(key))
            if message.get_content_type()=='text/plain':
                recipient = message['subject']
                content   = message.get_payload()
                print('sending sms')
                answer    = send_sms(recipient, content)
                if answer:
                    mbox.remove(key)
                else:
                    print('message not sent')
            else: 
                print('Message contains non plain text')
    time.sleep(period)
options={
    'idle':idle,
    'wait':wait,
}
#-STATES
while True:
    print('state: '+ state)
    options[state]()
